% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tseq.R
\name{tseq}
\alias{tseq}
\title{IRT True Score Equating}
\usage{
tseq(
  param1 = NULL,
  param2 = NULL,
  weight1 = NULL,
  weight2 = NULL,
  method = 0,
  interpol = "spline",
  thmin = -5,
  thmax = 5,
  npoints = 121,
  round = 0,
  by_x = 1,
  print = 0,
  plot = 0
)
}
\arguments{
\item{param1}{The item parameter data frame for test1}

\item{param2}{The item parameter data frame for test2}

\item{weight1}{The weight data frame for test1, or NULL}

\item{weight2}{The weigth data frame for test2, or NULL}

\item{method}{= 0 to use interpolation when calculating inv trf \cr
= 1 to use native \code{uniroot} function (slow).}

\item{interpol}{Interpolation option: See \code{lazy.tools::interpol}}

\item{thmin}{The minimum value of theta for interpolation.}

\item{thmax}{The maximum value of theta for interpolation.}

\item{npoints}{# of theta points in \code{[thmin,thmax]} for interpolation.}

\item{round}{= 1 to round the result to integer}

\item{by_x}{The increment of x}

\item{print}{= 1 or 2 to print the result}

\item{plot}{= 1 to plot the result}
}
\value{
A list of \cr
x1 The test score of test1 \cr
x2_1 The test2 equivalent of x \cr
theta The value of theta corresponding to x. \cr
locmin The locations of very small theta values. \cr
locmax The locations of very large theta values \cr
minmax1 The minimum and maximum score of test1 score \cr
minmax2 The minimum and maximum score of test2 score
}
\description{
This function performs the IRT True Score Equating of
two test scores. \cr
Japanese help file: (\link[lazy.irt]{tseq_JPH})
}
\details{
This function equates the test score of test1, x1, to the score of test2,
x2. \cr
The resulting score will be named as x2_1.

The score of test1 at \cr
\code{x1 <- seq(minscore,maxscore, by=by_x)} \cr
will be equated to the score of test2.

Note that, when \code{round=1}, the result may NOT be symmetric.\cr
Run the example below with \code{by_x=1} and \code{round=1}.
}
\examples{
res <- tseq( paramS1, paramS2, print=2 )
res <- tseq( paramS1, paramS2, weight1=weightS12, weight2=weightS21, print=2 )

# The effect of item weight.
res <- tseq( paramB1, paramB1, weight1=weightB11, weight2=weightB12, print=3 )

# checking if symmetric
# equate test1 to test2
res1 <- tseq( paramS1, paramS2, by_x=0.5 )
# equate test2 to test1
res2 <- tseq( paramS2, paramS1, by_x=0.5 )
# merge result
r1 <- data.frame(x1=res1$x1, y1=res1$x2_1)
r2 <- data.frame(y2=res2$x1, x2=res2$x2_1)
rx <- merge( r1, r2, by.x="x1", by.y="x2", all=TRUE)
rx$y <- ifelse( is.na(rx$y1), rx$y2, rx$y1 )
ry <- merge( r1, r2, by.x="y1", by.y="y2", all=TRUE)
ry$x <- ifelse( is.na(ry$x1), ry$x2, ry$x1 )
printm(rx,ry)

# comparison of methods
res1 <- tseq( paramS1, paramS1, method=1, by_x=0.1, weight2=weightS12 )
res2 <- tseq( paramS1, paramS1, method=0, by_x=0.1, weight2=weightS12 )
# Print(res1$x1, res1$x2_1, res1$x2_1-res2$x2_1, fmt="6.1, 6.4 9.6")
summary( abs(res1$x2_1-res2$x2_1) )


}
